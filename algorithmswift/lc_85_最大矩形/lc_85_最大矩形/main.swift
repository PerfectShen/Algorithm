//
//  main.swift
//  lc_85_最大矩形
//
//  Created by 王燊 on 2020/12/26.
//

// 85. 最大矩形 (困难)
/*
 给定一个仅包含 0 和 1 、大小为 rows x cols 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。

  

 示例 1：


 输入：matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
 输出：6
 解释：最大矩形如上图所示。
 示例 2：

 输入：matrix = []
 输出：0
 示例 3：

 输入：matrix = [["0"]]
 输出：0
 示例 4：

 输入：matrix = [["1"]]
 输出：1
 示例 5：

 输入：matrix = [["0","0"]]
 输出：0
  

 提示：

 rows == matrix.length
 cols == matrix[0].length
 0 <= row, cols <= 200
 matrix[i][j] 为 '0' 或 '1'

 来源：力扣（LeetCode）
 链接：https://leetcode-cn.com/problems/maximal-rectangle
 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

import Foundation



let solution = Solution2()
let matrix_o = [["0","0","0","0","0","0","1"],
                ["0","0","0","0","1","1","1"],
                ["1","1","1","1","1","1","1"],
                ["0","0","0","1","1","1","1"]]

//let matrix_o = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
    //





//[[0, 0, 0, 0, 0, 0, 1],
// [0, 0, 0, 0, 1, 2, 3],
// [1, 2, 3, 4, 5, 6, 7],
// [0, 0, 0, 1, 2, 3, 4]]
//
//[[0, 0, 0, 0, 0, 0, 1],
// [0, 0, 0, 0, 1, 2, 4],
// [1, 2, 3, 4, 6, 8, 11],
// [1, 2, 3, 5, 8, 11, 15]]

// dp 0 , 0   0
// dp 0 , 1


// dp 0, 0  1
// dp i , j
    //[["1","1"],["1","1"]]
    //[["1","0","1","0","0"],
//                ["1","0","1","1","1"],
//                ["1","1","1","1","1"],
//                ["1","0","0","1","0"]]
    //[["1","0","0","0","1"],
                //["1","1","0","1","1"],
            //    ["1","1","1","1","1"]] //[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
    //[["1","1"],["1","1"]] //[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
var matrix = [[Character]]()
let cols = matrix_o[0].count
for i in 0..<matrix_o.count {
    var subArray = [Character]()
    for j in 0..<cols {
        subArray.append(Character(matrix_o[i][j]))
    }
    matrix.append(subArray)
}
print(solution.maximalRectangle(matrix))
